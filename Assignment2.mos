model Assignment_2
uses "mmxprs"

! Model constructed by Benjamin de Sousa & Alexandros Zachakos

declarations
  ! Defining the size of the arrays to be generated
  number_of_shifts = 7
  number_of_days = 7
  number_of_products = 7
  number_of_worker_types = 2
  days = 1..number_of_days
  products = 1..number_of_products
  worker_type = 1..number_of_worker_types
  shifts = 1..number_of_shifts

  ! Arrays intialised from the data file
  day_names: array(days) of string
  product_names: array(products) of string
  type_names: array(worker_type) of string


  cost, work_hours: array(worker_type) of real
  production_hours, price, M, startup_cost: array(products) of real
  max_workers: real

  ! Model generated arrays
  produced: array(days, products) of mpvar
  workers: array (shifts, days, worker_type) of mpvar


  max_workers_cts: array(days) of linctr
  worker_ratio_cts: linctr

  ! Auxiliary binary variables
  startup: array(days, products) of mpvar
  t, two_over_hundred, prod3and4: array(days) of mpvar
  ! Matrix A of working days
  I=1..number_of_shifts
  J=1..number_of_days
  A: array(I,J) of real

  ! Extension declarations
  production_percentage: array(products) of linctr
  productivity: array(worker_type) of real
end-declarations

initialisations from "working_time.dat"
  day_names product_names cost work_hours max_workers
  production_hours price M startup_cost A type_names
  productivity
end-initialisations

! Objective function
total_profit := sum(d in days)(two_over_hundred(d)*price(2)+sum(p in products)produced(d,p)*price(p)) - sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*cost(w) - sum(d in days, p in products)startup_cost(p)*startup(d,p)

! Constraints
! Assigning shift patterns to workers
forall(s in shifts, d in days, w in worker_type)do
  if (A(s,d)>=1) then
    workers(s,s,w)=workers(s,d,w)
  end-if

  if (A(s,d)<=0) then
    workers(s,d,w)=0
  end-if
end-do


! Assigning types to variables
forall(d in days)do
  t(d) is_binary
  two_over_hundred(d) >= 0
  two_over_hundred(d) is_integer
  produced(d,2)<=100
  prod3and4(d) is_binary
end-do

forall(s in shifts, d in days, w in worker_type)do
  workers(s,d,w) is_integer
  workers(s,d,w) >= 0
end-do

forall(p in products, d in days)do
  startup(d,p) is_binary
  produced(d,p) >= 0
  produced(d,p) is_integer
end-do

! Limiting number of workers to be <= 500
forall(d in days) do
  max_workers_cts(d) := sum(s in shifts, w in worker_type)workers(s,d,w)
  max_workers_cts(d)<= max_workers
end-do

! Limiting the part time workforce hours to be <= 25% of the total
total_part_time_labor_hours:=sum(s in shifts, d in days) workers(s,d,2)*work_hours(2)
worker_ratio_cts:= 0.25*(sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*work_hours(w))
worker_ratio_cts >= total_part_time_labor_hours

! Startup cost constraint
forall(d in days, p in products)do
  produced(d,p) <= M(p)*startup(d,p)
  produced(d,p) >= startup(d,p)
end-do

! Adjustment constraint for production time of 2 based on quantity
forall(d in days)do
  two_over_hundred(d) <= (M(2)-100)*t(d)
  produced(d,2)-99<=t(d)
  100*t(d) <= produced(d,2)
end-do

! Adding 75 production hours if products 3 and 4 are produced together
forall(d in days)do
  prod3and4(d)<=startup(d,3)
  prod3and4(d)<=startup(d,4)
  prod3and4(d)>=startup(d,3)+startup(d,4)-1
end-do

! Limiting the production hours to be less than the total working hours
forall(d in days) do
  total_production := 3*two_over_hundred(d)+75*prod3and4(d)+sum(p in products)production_hours(p)*produced(d,p)
  total_daily_labor_hours := sum(s in shifts, w in worker_type)workers(s,d,w)*work_hours(w)
  total_production <= total_daily_labor_hours
end-do

!!!!!!!!!!!!!!!!!!!!!!!Extension!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Left commented out to ensure that vanilla model results can be viewed first
!Limiting the number of units for each product to a set proportion of the total production
! forall(p in products)do
!   total_labour_hours := sum(s in shifts, d in days, w in worker_type)(workers(s,d,w)*work_hours(w))
!   production_percentage(p) := sum(d in days)(produced(d,p)*production_hours(p)+3*two_over_hundred(d)) 
!   production_percentage(p)<= 0.25*total_labour_hours
! end-do

! !Modelling reduction in productivity over time
! forall(d in days) do
! total_daily_prod_hours := 3*two_over_hundred(d)+75*prod3and4(d)+sum(p in products)production_hours(p)*produced(d,p) 
! reduced_productivity_labor_hours := sum(s in shifts, w in worker_type)workers(s,d,w)*work_hours(w)*productivity(w)
! total_daily_prod_hours <= reduced_productivity_labor_hours
! end-do
! forall(p in products, d in days)do
!     produced(d,p) <= M(p)*productivity(1)*startup(d,p)
! end-do
! forall(d in days)do
!     two_over_hundred(d) <= (M(2)*productivity(1)-100)*t(d)
! end-do
!!!!!!!!!!!!!!!!!!!!!!!Extension!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Maximising the profit
maximize(total_profit)

writeln

! Printing the results
writeln("Labour Data:")

writeln
! Printing the worker data
writeln("Worker Type Breakdown:")
forall(d in days, w in worker_type)do
  writeln("Total number of ", type_names(w), " workers on ", day_names(d),": ", sum(s in shifts)getsol(workers(s,d,w)))
end-do

writeln

forall(d in days)do
  writeln("The percentage of the labour hours made up of ", type_names(2), " workers on ", day_names(d), " is: ", strfmt(( getsol(sum(s in shifts) workers(s,d,2)*work_hours(2)) /getsol(sum(s in shifts, w in worker_type) workers(s,d,w)*work_hours(w)) * 100 ),0,2), "%")
end-do

writeln

writeln("Comparison of labour hours to production hours:")
forall(d in days) do
  writeln("Work hours on ", day_names(d),"= ", sum(s in shifts, w in worker_type) getsol(workers(s,d,w))*work_hours(w))
  writeln("Production hours on ", day_names(d),"= ", getsol(total_production))
  writeln
end-do

writeln

writeln("Labour Data Totals:")
forall(w in worker_type)do
  writeln("The total number of ", type_names(w), " workers through the week is: ", sum(s in shifts, d in days)getsol(workers(s,d,w)))
end-do

writeln

writeln("The total percentage of the labour hours made up of ", type_names(2), " workers is: ", strfmt(( getsol(sum(s in shifts, d in days) workers(s,d,2)*work_hours(2)) /getsol(sum(s in shifts, d in days, w in worker_type) workers(s,d,w)*work_hours(w)) * 100 ),0,2), "%")

writeln

writeln("Total work hours: ", getsol(sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*work_hours(w)))
writeln("Total production hours: ", sum(d in days)getsol(sum(p in products)total_production))

writeln
writeln

writeln("Production Data:")

writeln
! Printing the production data
writeln("Production volumes on each day:")
forall(d in days, p in products)do
  if(getsol(produced(d,p)) > 0)then
    writeln("Units of product ", p, " units of product produced on ",day_names(d), ": ", getsol(produced(d,p)))
  end-if
end-do

writeln

forall(d in days) do
    writeln("Units of product 2 produced on ",day_names(d)," with increased production hours: ",getsol(two_over_hundred(d)))
end-do

writeln

writeln("Production Totals:")
forall(p in products)do
  if(p = products(2)) then
    total := sum(d in days)(getsol(two_over_hundred(d))+getsol(produced(d,2)))
  else
    total := sum(d in days)getsol(produced(d,p))
  end-if

  writeln("Total units of product ", p, ": ", total)
end-do

writeln

forall(d in days)do
  writeln("The total units of products produced on ", day_names(d), " was : ", sum(p in products)getsol(produced(d,p)))
end-do

writeln

writeln("The total production volume over the week was: ", sum(d in days, p in products)getsol(produced(d,p)), " units")

writeln

writeln("The total revenue for the week was: £", getsol(sum(d in days)(two_over_hundred(d)*price(2)+sum(p in products)produced(d,p)*price(p))))
writeln("The total labour cost for the week was : £", getsol(sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*cost(w) - sum(d in days, p in products)startup_cost(p)*startup(d,p)))

writeln
writeln


! Printing objective function result
writeln("Result of the objective function:")
writeln("Total profit: £",getobjval)


writeln
writeln


!!!!!!!!!!!!!!!!!!!!!!!Sensitivity Analysis!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Unfortunately does not produce any meaningul results but left in for verification
! writeln("Sensitivity Analysis:")
! writeln

! writeln("Solver status code: ", getprobstat)
! ! LP Relaxation if solution is not optimal
! if getprobstat = 2 then
!   writeln("Solution was feasible but not optimal. Performing an LP relaxation to allow for sensitivity analysis")
!   fixmipentities
!   maximize(total_profit)
! end-if
! ! Testing the limit on maximum number of workers
! forall(d in days)do
!   if(getslack(max_workers_cts(d)) <0.0001)then
! 	  writeln("Dual for ", day_names(d), " is ", strfmt(getdual(max_workers_cts(d)),0,0))
! 	  ! Lower bound
! 	  a := getrange(XPRS_LOACT, max_workers_cts(d))
! 	  ! Upper bound
! 	  b := getrange(XPRS_UPACT, max_workers_cts(d))
! 	  writeln("Constraint range ", " is ", "[", a, ", ", b,"]")
!   end-if
! end-do

! writeln
! ! Testing the part time worker ratio
! if(getslack(worker_ratio_cts) <0.0001)then
! 	 writeln("Dual for part time ratio constraint is ", getdual(worker_ratio_cts))
! 	 ! Lower bound
! 	 a := getrange(XPRS_LOACT, worker_ratio_cts)
! 	 ! Upper bound
! 	 b := getrange(XPRS_UPACT, worker_ratio_cts)
! 	 writeln("Constraint range ", " is ", "[", a, ", ", b,"]")
! end-if
!!!!!!!!!!!!!!!!!!!!!!!Sensitivity Analysis!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

writeln
writeln

!!!!!!!!!!!!!!!!!!!!!!!Extension!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! writeln("Extensions:")
! Printing result of introducing as product limit
forall(p in products)do
  if (sum(d in days)(getsol(produced(d,p))) > 0) then
    production_share := 100*(sum(d in days)(getsol(produced(d,p)) * production_hours(p)) / sum(s in shifts, dd in days, w in worker_type)(getsol(workers(s,dd,w) * work_hours(w))))
    writeln("The proportion of product ", product_names(p), " produced was: ", strfmt(production_share,0,3), "%" )
  end-if
end-do
!!!!!!!!!!!!!!!!!!!!!!!Extension!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

end-model