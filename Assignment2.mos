model ModelName

uses "mmxprs"

declarations
  number_of_shifts = 7
  number_of_days = 7
  number_of_products = 7
  number_of_worker_types = 2
  days = 1..number_of_days
  products = 1..number_of_products
  worker_type = 1..number_of_worker_types
  shifts = 1..number_of_shifts


  day_names: array(days) of string
  product_names: array(products) of string
  type_names: array(worker_type) of string


  cost, work_hours: array(worker_type) of real
  production_hours, price, M, startup_cost: array(products) of real
  max_workers: real

  ! Auxiliary mpvar variable representing the relationship between production hours and produced amount of product 2
  ! corrected_production_hours: mpvar

  ! Model generated arrays
  produced: array(days, products) of mpvar
  workers: array (shifts, days, worker_type) of mpvar

  ! Auxiliary binary variables
  startup: array(days, products) of mpvar
  t, two_over_hundred, prod3and4: array(days) of mpvar

  ! Matrix A of working days
  I=1..number_of_shifts
  J=1..number_of_days
  A: array(I,J) of real
end-declarations

initialisations from "working_time.dat"
  day_names product_names cost work_hours max_workers
  production_hours price M startup_cost A type_names
end-initialisations

! Objective function
total_profit := sum(d in days)(two_over_hundred(d)*price(2)+sum(p in products)produced(d,p)*price(p)) - sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*A(s,d)*cost(w) - sum(d in days, p in products)startup_cost(p)*startup(d,p)

! Constraints
forall(s in shifts, d in days, w in worker_type)do
  if (A(s,d)>=1) then
    workers(s,s,w)=workers(s,d,w)
  end-if
  
  if (A(s,d)<=0) then
    workers(s,d,w)=0
  end-if
  
end-do


! Assigning types to variables
forall(d in days)do
  t(d) is_binary
  two_over_hundred(d) >= 0
  two_over_hundred(d) is_integer
  produced(d,2)<=100
  prod3and4(d) is_binary
end-do
  
forall(s in shifts, d in days, w in worker_type)do
  workers(s,d,w) is_integer
  workers(s,d,w) >= 0
end-do

forall(p in products, d in days)do
  startup(d,p) is_binary
  produced(d,p) >= 0
  produced(d,p) is_integer
end-do

! Limiting number of workers to be <= 500
forall(d in days) do
  sum(s in shifts, w in worker_type)workers(s,d,w)*A(s,d) <= max_workers
end-do

! Limiting the part time workforce hours to be <= 25% of the total
0.25*(sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*work_hours(w)*A(s,d)) >= sum(s in shifts, d in days) workers(s,d,2)*work_hours(2)*A(s,d)

! Startup cost constraint
forall(p in products, d in days)do
  produced(d,p) <= M(p)*startup(d,p)
  produced(d,p) >= startup(d,p)
end-do

! Adjustment constraint for production time of 2 based on quantity
forall(d in days)do
  two_over_hundred(d) <= (M(2)-100)*t(d)
  produced(d,2)-99<=t(d)
  100*t(d) <= produced(d,2)
  prod3and4(d)<=startup(d,3)
  prod3and4(d)<=startup(d,4)
  prod3and4(d)>=startup(d,3)+startup(d,4)-1
end-do

! Limiting the production hours to be less than the total working hours
forall(d in days) do
  two_over_hundred(d)+75*prod3and4(d)+sum(p in products)production_hours(p)*produced(d,p) <= sum(s in shifts, w in worker_type)workers(s,d,w)*work_hours(w)*A(s,d)
end-do

maximise(total_profit)

writeln

writeln("Worker Data:")

writeln

writeln("Worker Type Breakdown:")
forall(d in days)do
  writeln("Total number of Full-Time workers on ", day_names(d),": ", sum(s in shifts)getsol(workers(s,d,1)*A(s,d)))
  writeln("Total number of Part-Time workers on ", day_names(d),": ", sum(s in shifts)getsol(workers(s,d,2)*A(s,d)))
  writeln
end-do

writeln

writeln("Comparison of labour hours to production hours:")
forall(d in days) do
  writeln("Work hours on ", day_names(d),"= ", sum(s in shifts, w in worker_type) getsol(workers(s,d,w))*work_hours(w)*A(s,d))
  writeln("Production hours on ", day_names(d),"= ", getsol(two_over_hundred(d)+75*prod3and4(d)+sum(p in products)production_hours(p)*produced(d,p)))
  writeln
end-do

writeln

writeln("Total work hours: ", getsol(sum(s in shifts, d in days, w in worker_type)workers(s,d,w)*A(s,d)*work_hours(w)))
writeln("Total production hours: ", sum(d in days)getsol(sum(p in products)production_hours(p)*produced(d,p) + two_over_hundred(d)+75*prod3and4(d)))

writeln
writeln

writeln("Production Data:")

writeln

writeln("Production volumes on each day:")
forall(d in days, p in products)do
  if(getsol(produced(d,p)) > 0)then
    writeln("Units of product ", p, " units of product produced on ",day_names(d), ": ", getsol(produced(d,p)))
  end-if
end-do

writeln

forall(d in days) do
    writeln("Units of product 2 produced on ",day_names(d)," with increased production hours: ",getsol(two_over_hundred(d)))
end-do

writeln

writeln("Production Totals:")
forall(p in products)do
  if(p = products(2)) then
    total := sum(d in days)(getsol(two_over_hundred(d))+getsol(produced(d,2)))
  else
    total := sum(d in days)getsol(produced(d,p))
  end-if

  writeln("Total units of product ", p, ": ", total)

end-do

writeln
writeln

writeln("Total profit: Â£",getobjval)


end-model