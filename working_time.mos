model ModelName

  uses "mmxprs"

  declarations
    number_of_days = 7
    number_of_products = 7
    number_of_worker_types = 2
    days = 1..number_of_days
    products = 1..number_of_products
    worker_type = 1..number_of_worker_types


    day_names: array(days) of string
    product_names: array(products) of string


    cost, work_hours: array(worker_type) of real
    production_hours, price, M, startup_cost: array(products) of real
    max_workers: real

    ! Auxiliary mpvar variable representing the relationship between production hours and produced amount of product 2
    ph_2: mpvar

    ! Model generated arrays
    produced: array(products,days) of mpvar
    workers_starting: array (days, worker_type) of mpvar

    ! Auxiliary binary variables
    startup: array(products, days) of mpvar
    t, v: mpvar
  end-declarations

  initialisations from "working_time.dat"
    day_names product_names cost work_hours max_workers
    production_hours price M startup_cost
  end-initialisations

  ! Objective function
  total_profit := sum(p in products,d in days)produced(p,d)*price(p) - sum(d in 1..5, w in worker_type)workers_starting(d,w)*cost(w) - sum(p in products, d in days)startup_cost(p)*startup(p,d)

  writeln("Begin running model")
  ! Constraints

  ! Creating binary constraints
  t is_binary
  forall(p in products, d in days)
    startup(p,d) is_binary
  v is_binary

  ! Limiting number of workers to be <= 500
  sum(d in 1..5, w in worker_type)workers_starting(d,w) <= max_workers

  ! Limiting the part time workforce hours to be <= 25% of the total
  0.25*(sum(d in days, w in worker_type)workers_starting(d,w)*work_hours(w)) >= sum(d in days, w in worker_type)workers_starting(d,2)*work_hours(2)

  ! Startup cost constraint 
  forall(p in products, d in days)do
    produced(p,d) <= M(p)*startup(p,d)
  end-do

  ! Adjustment constraint for production time of 2 based on quantity
  forall(p in products, d in days)do
    produced(2,d) - 100 <= M(2)*t
    produced(2,d) - 100 >= 0.0001 - M(2)*(1-t)
  end-do


  ph_2 >= sum(p in products,d in days)production_hours(p) + produced(2,d) - 100 - M(2)*(1-t)
  ph_2 <= sum(p in products, d in days)production_hours(p) + produced(2,d) - 100 + M(2)*(1-t)

  maximise(total_profit)

  writeln(getobjval)

  writeln("End running model")
end-model
